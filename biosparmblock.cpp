/*************************************************************************************/
// Options class
/*************************************************************************************/
#include "biosparmblock.h"


BIOSParmBlock::BIOSParmBlock() {
}

void BIOSParmBlock::fill(char* buffer) {
	memcpy(&biosParmBlock, buffer, sizeof(BiosParmBlock));
}

void BIOSParmBlock::setFAT12() {
	unsigned char jump[3] = { 0xEB, 0x3C, 0x90 };
	unsigned char signature[2] = { 0x55, 0xAA };
	unsigned char bootCode[448] = { 0x33, 0xc9, 
		0x8e, 0xd1, 0xbc, 0xf0, 0x7b, 0x8e, 0xd9, 0xb8, 0x00, 0x20, 0x8e, 0xc0, 0xfc, 0xbd, 0x00, 0x7c,			//040
		0x38, 0x4e, 0x24, 0x7d, 0x24, 0x8b, 0xc1, 0x99, 0xe8, 0x3c, 0x01, 0x72, 0x1c, 0x83, 0xeb, 0x3a,			//050
		0x66, 0xa1, 0x1c, 0x7c, 0x26, 0x66, 0x3b, 0x07, 0x26, 0x8a, 0x57, 0xfc, 0x75, 0x06, 0x80, 0xca,			//060
		0x02, 0x88, 0x56, 0x02, 0x80, 0xc3, 0x10, 0x73, 0xeb, 0x33, 0xc9, 0x8a, 0x46, 0x10, 0x98, 0xf7,			//070
		0x66, 0x16, 0x03, 0x46, 0x1c, 0x13, 0x56, 0x1e, 0x03, 0x46, 0x0e, 0x13, 0xd1, 0x8b, 0x76, 0x11,			//080
		0x60, 0x89, 0x46, 0xfc, 0x89, 0x56, 0xfe, 0xb8, 0x20, 0x00, 0xf7, 0xe6, 0x8b, 0x5e, 0x0b, 0x03,			//090
		0xc3, 0x48, 0xf7, 0xf3, 0x01, 0x46, 0xfc, 0x11, 0x4e, 0xfe, 0x61, 0xbf, 0x00, 0x00, 0xe8, 0xe6,			//0A0
		0x00, 0x72, 0x39, 0x26, 0x38, 0x2d, 0x74, 0x17, 0x60, 0xb1, 0x0b, 0xbe, 0xa1, 0x7d, 0xf3, 0xa6,			//0B0
		0x61, 0x74, 0x32, 0x4e, 0x74, 0x09, 0x83, 0xc7, 0x20, 0x3b, 0xfb, 0x72, 0xe6, 0xeb, 0xdc, 0xa0,			//0C0
		0xfb, 0x7d, 0xb4, 0x7d, 0x8b, 0xf0, 0xac, 0x98, 0x40, 0x74, 0x0c, 0x48, 0x74, 0x13, 0xb4, 0x0e,			//0D0
		0xbb, 0x07, 0x00, 0xcd, 0x10, 0xeb, 0xef, 0xa0, 0xfd, 0x7d, 0xeb, 0xe6, 0xa0, 0xfc, 0x7d, 0xeb,			//0E0
		0xe1, 0xcd, 0x16, 0xcd, 0x19, 0x26, 0x8b, 0x55, 0x1a, 0x52, 0xb0, 0x01, 0xbb, 0x00, 0x00, 0xe8,			//0F0
		0x3b, 0x00, 0x72, 0xe8, 0x5b, 0x8a, 0x56, 0x24, 0xbe, 0x0b, 0x7c, 0x8b, 0xfc, 0xc7, 0x46, 0xf0,			//100
		0x3d, 0x7d, 0xc7, 0x46, 0xf4, 0x29, 0x7d, 0x8c, 0xd9, 0x89, 0x4e, 0xf2, 0x89, 0x4e, 0xf6, 0xc6,			//110
		0x06, 0x96, 0x7d, 0xcb, 0xea, 0x03, 0x00, 0x00, 0x20, 0x0f, 0xb6, 0xc8, 0x66, 0x8b, 0x46, 0xf8,			//120
		0x66, 0x03, 0x46, 0x1c, 0x66, 0x8b, 0xd0, 0x66, 0xc1, 0xea, 0x10, 0xeb, 0x5e, 0x0f, 0xb6, 0xc8,			//130
		0x4a, 0x4a, 0x8a, 0x46, 0x0d, 0x32, 0xe4, 0xf7, 0xe2, 0x03, 0x46, 0xfc, 0x13, 0x56, 0xfe, 0xeb,			//140
		0x4a, 0x52, 0x50, 0x06, 0x53, 0x6a, 0x01, 0x6a, 0x10, 0x91, 0x8b, 0x46, 0x18, 0x96, 0x92, 0x33,			//150
		0xd2, 0xf7, 0xf6, 0x91, 0xf7, 0xf6, 0x42, 0x87, 0xca, 0xf7, 0x76, 0x1a, 0x8a, 0xf2, 0x8a, 0xe8,			//160
		0xc0, 0xcc, 0x02, 0x0a, 0xcc, 0xb8, 0x01, 0x02, 0x80, 0x7e, 0x02, 0x0e, 0x75, 0x04, 0xb4, 0x42,			//170
		0x8b, 0xf4, 0x8a, 0x56, 0x24, 0xcd, 0x13, 0x61, 0x61, 0x72, 0x0b, 0x40, 0x75, 0x01, 0x42, 0x03,			//180
		0x5e, 0x0b, 0x49, 0x75, 0x06, 0xf8, 0xc3, 0x41, 0xbb, 0x00, 0x00, 0x60, 0x66, 0x6a, 0x00, 0xeb,			//190
		0xb0, 0x42, 0x4f, 0x4f, 0x54, 0x4d, 0x47, 0x52, 0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a, 0x52, 0x65,			//1A0
		0x6d, 0x6f, 0x76, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x74,			//1B0
		0x68, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0xff, 0x0d, 0x0a, 0x44, 0x69, 0x73,			//1C0
		0x6b, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xff, 0x0d, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20,			//1D0
		0x61, 0x6e, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61,			//1E0
		0x72, 0x74, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0xcb, 0xd8						//1F0
	};

	memcpy(biosParmBlock.jump, jump, 3);
	strncpy((char *)biosParmBlock.OEMId, "MSDOS5.0",8);
	biosParmBlock.bpbBytesPerSector = 512;
	biosParmBlock.bpbSectorsPerCluster = 0x01;
	biosParmBlock.bpbReservedSectors = 1;
	biosParmBlock.bpbNumberOfFATs = 2;
	biosParmBlock.bpbRootEntries = 224;
	biosParmBlock.bpbTotalSectors = 2880;
	biosParmBlock.bpbMedia = 0xf0;
	biosParmBlock.bpbSectorsPerFAT = 9;
	biosParmBlock.bpbSectorsPerTrack = 18;
	biosParmBlock.bpbHeadsPerCylinder = 2;
	biosParmBlock.bpbHiddenSectors = 0;
	biosParmBlock.bpbTotalSectorsBig = 0;
	biosParmBlock.bsDriveNumber = 0x00;
	biosParmBlock.bsUnused = 0x00;
	biosParmBlock.bsExtBootSignature = 0x29;
	biosParmBlock.bsSerialNumber = 0xCB239F6;
	strncpy((char *)biosParmBlock.bsVolumeLabel, "NO NAME    ", 11);
	strncpy((char *)biosParmBlock.bsFileSystem, "FAT12   ", 8);
	memcpy(biosParmBlock.bootCode, bootCode, 448);
	memcpy(biosParmBlock.bootSignature, signature, 2);
}

void BIOSParmBlock::print() {
	char oemID[9];
	char volumeLabel[12];
	char diskType[9];


	memcpy(&oemID, biosParmBlock.OEMId, sizeof(biosParmBlock.OEMId)); oemID[sizeof(biosParmBlock.OEMId)] = '\0';
	memcpy(&volumeLabel, biosParmBlock.bsVolumeLabel, sizeof(biosParmBlock.bsVolumeLabel)); volumeLabel[sizeof(biosParmBlock.bsVolumeLabel)] = '\0';
	memcpy(&diskType, biosParmBlock.bsFileSystem, sizeof(biosParmBlock.bsFileSystem)); diskType[sizeof(biosParmBlock.bsFileSystem)] = '\0';

	cout << "OEM Id                   : " << oemID << endl;
	cout << "sector size              : " << biosParmBlock.bpbBytesPerSector << " bytes" << endl;
	cout << "cluster size             : " << short(biosParmBlock.bpbSectorsPerCluster) << " sector(s)" << endl;
	cout << "reserved (boot) sectors  : " << biosParmBlock.bpbReservedSectors << endl;
	cout << "number of FATs           : " << short(biosParmBlock.bpbNumberOfFATs) << endl;
	cout << "root entries             : " << biosParmBlock.bpbRootEntries << endl;
	cout << "total sectors            : " << biosParmBlock.bpbTotalSectors << " sectors" << endl;
	cout << "media descriptor byte    : 0x" << std::hex << std::setw(2) << short(biosParmBlock.bpbMedia) << std::dec << endl;
	cout << "sectors per FAT          : " << biosParmBlock.bpbSectorsPerFAT << endl;
	cout << "sectors per track        : " << biosParmBlock.bpbSectorsPerTrack << endl;
	cout << "heads                    : " << biosParmBlock.bpbHeadsPerCylinder << endl;
	cout << "hidden sectors           : " << biosParmBlock.bpbHiddenSectors << endl;
	cout << "big size sectors         : " << biosParmBlock.bpbTotalSectorsBig << " sectors" << endl;
	cout << "physical drive Id        : 0x" << std::hex << std::setw(2) << std::setfill('0') << short(biosParmBlock.bsDriveNumber) << endl;
	cout << "signature                : 0x" << std::hex << std::setw(2) << short(biosParmBlock.bsExtBootSignature) << endl;
	cout << "serial number            : " << std::hex << std::setw(8) << biosParmBlock.bsSerialNumber << std::dec << std::setfill(' ') << endl;
	cout << "volume label             : " << volumeLabel << endl;
	cout << "disk type                : " << diskType << endl;

}

BIOSParmBlock::~BIOSParmBlock() {
}